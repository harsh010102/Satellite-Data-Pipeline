#!/usr/bin/env python
# coding: utf-8

# In[ ]:


get_ipython().system('pip install telethon')
get_ipython().system('pip install pandas')


# In[ ]:


from telethon.sync import TelegramClient
from telethon.sessions import StringSession


# In[ ]:


get_ipython().system('python temp.py')


# In[ ]:


import pandas as pd


# In[ ]:


from telethon.sync import TelegramClient
from telethon.sessions import StringSession
import asyncio
import nest_asyncio
import os

# Initialize nest_asyncio to run asyncio within Jupyter/IPython
nest_asyncio.apply()

api_id = 27268549
api_hash = 'd390faee1fe7f79fe0b081324a343356'
phone = '+919724111939'
username = "ptah112"

import os
import asyncio
from telethon.sync import TelegramClient
from telethon.sessions import StringSession
import pandas as pd

api_id = 27268549
api_hash = 'd390faee1fe7f79fe0b081324a343356'
phone = '+919724111939'
username = "ptah112"

# !!!MOST IMP everytime Use the session string generated by the Temp.py file!!!!
session_string = "1BVtsOL0Bu4066f26k8Algbf3njrb3lBVepp90PB6po8kyEa6bTEeelC32RboyA0kt_CVvX79FmFtWQDeSXKHCexi-6GryZfVDAg6PXeHLe6UivAkReHJtO8AtBCWAblgW42MeyIhkpy3YUh0hyKaIa1tYI0z2IlfF5rzEGQ9VpwOMe0QqKbM3OUMyPnKs8Z1LELwRpGGUocQjV-z1TlQBsDxe1z18OgyqQmgbPI8fXyX0lmZ3q8baNcmH6MoBWJ51qo_-IPFHRwbDNAEISpIpABh5OHCJoP22yJwjAaVqe5qivCPQCdfV-tGFrhR4c57wvi4ukVLVJREd-uef7PLKqHlEdREg1g="  # Replace with your session string

async def main():
    try:
        async with TelegramClient(StringSession(session_string), api_id, api_hash) as client:
            data = []
            async for message in client.iter_messages("https://t.me/GCC_report"):
                print(message.sender_id, ':', message.text, message.date)
                data.append([message.sender_id, message.text, message.date, message.id, message.post_author, message.views, message.peer_id.channel_id])

                # Check if the message has media (photo or video)
                if message.media:
                    if hasattr(message.media, 'photo'):
                        # Download photo
                        file_location = await client.download_media(message.media.photo, file=os.path.join('downloaded_media', 'photos'))
                        print(f"Downloaded photo: {file_location}")
                    elif hasattr(message.media, 'document'):
                        # Download video (or other documents)
                        file_location = await client.download_media(message.media.document, file=os.path.join('downloaded_media', 'videos'))
                        print(f"Downloaded video: {file_location}")

            # Save the data to a CSV file
            df = pd.DataFrame(data, columns=["message.sender_id", "message.text", "message.date", "message.id",  "message.post_author", "message.views", "message.peer_id.channel_id"])
            df.to_csv('data2_climate.csv', encoding='utf-8')

    except Exception as e:
        print("Session Timeout")

# Run the asynchronous code
loop = asyncio.get_event_loop()
loop.run_until_complete(main())


# In[ ]:




